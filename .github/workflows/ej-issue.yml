name: junie

on:
  workflow_call:
    secrets:
      GCP_DOCKER_JUNIE_KEY:
        required: false
    inputs:
      workflow_params:
        description: "JSON string containing all workflow parameters"
        type: string
        required: true

jobs:
  run-junie:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      packages: read
    steps:
      - name: Extract workflow params
        id: workflow-params
        uses: actions/github-script@v7
        env:
          INPUT_PARAMS: ${{ inputs.workflow_params }}
        with:
          script: |
            const params = JSON.parse(core.getInput('params'));
            Object.keys(params).forEach((key) => {
                core.setOutput(key, params[key]);
            });
            console.log(`Params are ${params}`);           

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.workflow-params.outputs.checkout_ref }}

      - name: Log in to GitHub Container Registry
        if: ${{ steps.workflow-params.outputs.use_github_registry == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to GCP Artifact Registry
        if: ${{ steps.workflow-params.outputs.use_github_registry == 'false' }}
        uses: docker/login-action@v3
        with:
          registry: europe-west1-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_DOCKER_JUNIE_KEY }}

      - name: Run junie plugin
        env:
          GCP_DOCKER_JUNIE_KEY: ${{ secrets.GCP_DOCKER_JUNIE_KEY }}
        run: |
          INGRAZZIO_URL="https://ingrazzio.labs.jb.gg"
          INGRAZZIO_ACCESS_TOKEN=$(curl -X POST "${INGRAZZIO_URL}/auth" \
            -H "Content-Type: application/json" \
            -s -S \
            -d "{\"token\": \"${{ secrets.GITHUB_TOKEN }}\"}" | jq -r '.id')      

          if [ -z "$INGRAZZIO_ACCESS_TOKEN" ] || [[ "$INGRAZZIO_ACCESS_TOKEN" != GH* ]]; then
            echo "INGRAZZIO_ACCESS_TOKEN is invalid: $INGRAZZIO_ACCESS_TOKEN, exiting with status 1."
            exit 1
          fi
          # to escape newlines and quotas
          ISSUE_BODY=ISSUE_BODY=$(cat <<'EOF'
            ${{ steps.workflow-params.outputs.issue_body }}
          EOF
          )
          
          if [ -n "$GCP_DOCKER_JUNIE_KEY" ]; then
            IMAGE="europe-west1-docker.pkg.dev/jetbrains-matterhorn-prod/junie-cloud/amd64-idea-ej:latest"
          else
            IMAGE="ghcr.io/jetbrains/junie_workflows/amd64-idea-ej:latest"
          fi

          docker run \
            -e ISSUE_TITLE="${{ steps.workflow-params.outputs.issue_title }}" \
            -e ISSUE_BODY="$ISSUE_BODY" \
            -e INGRAZZIO_URL="$INGRAZZIO_URL" \
            -e INGRAZZIO_GITHUB_ACCESS_TOKEN="$INGRAZZIO_ACCESS_TOKEN" \
            -e KEEP_SERVICE_DIR="true" \
            -v ${{ github.workspace }}:/project \
            -v ${{ github.workspace }}/ej-logs:/idea/idea-logs \
            --user root \
            $IMAGE

      - name: Allowing following step to patch logs and .idea
        if: always()
        run: |
          sudo chown -R runner:runner .idea || true
          sudo chown -R runner:runner ej-logs
          sudo chown -R runner:runner .matterhorn
          sudo chown runner:runner .output.txt || true
          sudo chown -R runner:runner ${{ github.workspace }} || true

      - name: Save junie result summary
        id: junie_summary
        continue-on-error: true
        run: |
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$(cat .matterhorn/.matterhorn/matterhorn_issue_md.swe_patch_idea | jq '.content.taskReport.summary')" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT          
          echo "output is $GITHUB_OUTPUT"

      - name: Archive Logs
        if: always() && (steps.workflow-params.outputs.upload_logs == 'true')
        uses: actions/upload-artifact@v4
        with:
          name: ej-logs
          path: ej-logs/
          include-hidden-files: 'true'
          retention-days: 3

      - name: Archive .matterhorn
        if: always() && (steps.workflow-params.outputs.upload_logs == 'true')
        uses: actions/upload-artifact@v4
        with:
          name: matterhorn-logs
          path: .matterhorn
          include-hidden-files: 'true'
          retention-days: 3

      - name: Restore or remove .idea directory
        run: |
          rm -rf ej-logs
          rm -rf .matterhorn
          rm -rf .output.txt

          if git ls-tree -d HEAD .idea | grep "\.idea" >/dev/null 2>&1; then
            echo "Restoring tracked '.idea' directory"
            git checkout -- .idea
            git clean -f -d .idea            
          else
            echo "Removing untracked '.idea' directory"
            rm -rf .idea
          fi

      - name: Create Pull Request
        if: steps.workflow-params.outputs.run_type == 'new_issue'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ steps.workflow-params.outputs.app_token }}
          commit-message: "${{ steps.workflow-params.outputs.issue_title }} \n changes from the task: #${{ steps.workflow-params.outputs.issue_id }}"
          title: "[Junie]: ${{ steps.workflow-params.outputs.issue_title }}"
          body: |
            ## 📌 PR Details

            - 🔗 **Issue:** #${{ steps.workflow-params.outputs.issue_id }}
            - 🏷 **Title:** ${{ github.event.issue.title }}
            
            ### 📝 Original Issue Description  
            > ${{ steps.workflow-params.outputs.issue_body }}
            
            ### 📊 Junie Summary
            ${{ steps.junie_summary.outputs.summary }}
          branch: junie-issue-${{ steps.workflow-params.outputs.issue_id }}
          base: ${{ steps.workflow-params.outputs.checkout_ref }}

      - name: Commit changes to PR branch
        if: steps.workflow-params.outputs.run_type == 'fix_all' || steps.workflow-params.outputs.run_type == 'fix_single'
        run: |
          git config --global user.name 'junie[bot]'
          git config --global user.email 'junie[bot]@users.noreply.github.com'
          git add .
          git commit -m "[${{ steps.workflow-params.outputs.issue_id }}]" -m "summary: ${{ steps.junie_summary.outputs.summary }}"
          git push origin HEAD:${{ steps.workflow-params.outputs.checkout_ref }}